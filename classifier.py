import os
from dotenv import load_dotenv
from google import genai
from langcodes import Language
from pydantic import BaseModel
from typing import Type, TypeVar, Optional
from pydantic import BaseModel, ValidationError
from global_defines import (
    Colors, 
    ERROR_COLOR, 
    WARNING_COLOR, 
    HEADER_COLOR,
    ENTITY_COLOR,
    SUCCESS_COLOR,
    TIME_COLOR,
    INFO_COLOR
)

from models import *

T = TypeVar('T', bound=BaseModel)


class Classifier:
    """
    Uses gemini AI model to generate objects of type [T] (pydantic schema) based on the input text.
    """
    def __init__(self):
        self.client = genai.Client(api_key=os.getenv("GOOGLE_API_KEY"))
        self.model = os.getenv("GEMINI_MODEL_DUMB", "gemini-2.0-flash")
        
    def generate(self, contents: str, pydantic_model: Type[T], response_mime_type: str = "application/json"):
        try:
            print(f"{INFO_COLOR}ü§ñ Generating content with model:{Colors.RESET} {ENTITY_COLOR}{self.model}{Colors.RESET}")
            response = self.client.models.generate_content(
                model=self.model,
                contents=contents,
                config={
                    "response_mime_type": response_mime_type,
                    "response_schema": pydantic_model,
                }
            )
            print(f"{SUCCESS_COLOR}‚úÖ Content generated successfully{Colors.RESET}")
            return response.parsed
        except Exception as e:
            print(f"{ERROR_COLOR}‚ùå Error generating content:{Colors.RESET} {e}")
            return None
       
    def generate_list(self, contents: str, pydantic_model: Type[T], response_mime_type: str = "application/json"):
        try:
            print(f"{INFO_COLOR}ü§ñ Generating content with model:{Colors.RESET} {ENTITY_COLOR}{self.model}{Colors.RESET}")
            response = self.client.models.generate_content(
                model=self.model,
                contents=contents,
                config={
                    "response_mime_type": response_mime_type,
                    "response_schema": list[pydantic_model],
                }
            )
            print(f"{SUCCESS_COLOR}‚úÖ Content generated successfully{Colors.RESET}")
            return response.parsed
        except Exception as e:
            print(f"{ERROR_COLOR}‚ùå Error generating content:{Colors.RESET} {e}")
            return None
        
        
        
    def general_text_llm_request(
        self,
        contents: str,
        language: str = "Russian",
        response_mime_type: str = "text/plain"
    ) -> Optional[str]:
        """
        Makes a clear text request to the LLM with improved language handling.

        Args:
            contents: The primary prompt or content for the LLM.
            language: The desired language for the response (e.g., "Russian", "English").
            response_mime_type: The expected MIME type for the response.

        Returns:
            The response text as a string if successful, otherwise None.
        """
        # --- IMPROVEMENT: A simple, clear header for the prompt ---
        # This gives the language instruction priority and context without over-engineering.
        # It also fixes the 'Language' vs 'language' bug.
        full_prompt = (
            f"–ó–∞–¥–∞–Ω–∏–µ: –û—Ç–≤–µ—Ç—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å –Ω–∞ {language} —è–∑—ã–∫–µ.\n"
            "---"
            f"\n{contents}"
        )

        try:
            print(f"{INFO_COLOR}ü§ñ Making text request to model: {ENTITY_COLOR}{self.model}{Colors.RESET}")
            # The full_prompt is now used in the API call
            response = self.client.models.generate_content(
                model=self.model,
                contents=full_prompt,
                config={
					"response_mime_type": response_mime_type,
				}
            )
            print(f"{SUCCESS_COLOR}‚úÖ Response received{Colors.RESET}")
            
            # It's good practice to check if the response is actually there
            # before returning it, as it could be blocked by safety filters.
            if response.text:
                return response.text
            else:
                print(f"{ERROR_COLOR}‚ùå Received an empty response (possibly blocked by safety filters).{Colors.RESET}")
                return None

        except Exception as e:
            print(f"{ERROR_COLOR}‚ùå Error in text request: {e}{Colors.RESET}")
            return None
        
        
if __name__ == "__main__":
    load_dotenv()
    
	# list of changes test
    classifier = Classifier()
    print(f"\n{HEADER_COLOR}Test x: char change Request{Colors.RESET}")
    a = classifier.generate_list(
        """
        {
  "name": "–ì—Ä–æ–º–æ–±–æ–π –Ø—Ä–æ—Å–ª–∞–≤",
  "max_hp": 75,
  "current_hp": 42,
  "ac": 16,
  "is_player": true,
  "conditions": [
    "–û—Å–ª–∞–±–ª–µ–Ω",
    "–û—à–µ–ª–æ–º–ª–µ–Ω"
  ],
  "inventory": [
    {
      "name": "–ë–æ–ª—å—à–æ–π –¥–≤—É—Ä—É—á–Ω—ã–π –º–µ—á '–ö—Ä–æ–≤–æ–∂–∞–¥'",
      "description": "–û–≥—Ä–æ–º–Ω—ã–π –º–µ—á, –≤—ã–∫–æ–≤–∞–Ω–Ω—ã–π –≤ –¥—Ä–µ–≤–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∞. –ü–æ–∫—Ä—ã—Ç —Ä—É–Ω–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ, –∫–∞–∫ –≥–æ–≤–æ—Ä—è—Ç, —É—Å–∏–ª–∏–≤–∞—é—Ç –∫—Ä–æ–≤–æ–∂–∞–¥–Ω–æ—Å—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞.",
      "item_type": "Weapon",
      "weight": 8.5,
      "value": 1500,
      "quantity": 1,
      "rarity": "Rare",
      "is_magical": true,
      "damage": "2d6 + 3",
      "damage_type": "–†—É–±—è—â–∏–π",
      "armor_class": null,
      "effect": "–ü—Ä–∏ –ø–æ–ø–∞–¥–∞–Ω–∏–∏ —Ü–µ–ª—å –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–π—Ç–∏ —Å–ø–∞—Å–±—Ä–æ—Å–æ–∫ –°–∏–ª—ã –∏–ª–∏ —É–ø–∞—Å—Ç—å –Ω–∞ –∑–µ–º–ª—é.",
      "properties": []
    },
    {
      "name": "–ó–µ–ª—å–µ –∏—Å—Ü–µ–ª–µ–Ω–∏—è",
      "description": "–ù–µ–±–æ–ª—å—à–∞—è –±—É—Ç—ã–ª–æ—á–∫–∞ —Å –∫—Ä–∞—Å–Ω–æ–π –∂–∏–¥–∫–æ—Å—Ç—å—é, —Å–ø–æ—Å–æ–±–Ω–æ–π –∏—Å—Ü–µ–ª—è—Ç—å —Ä–∞–Ω—ã.",
      "item_type": "Potion",
      "weight": 0.1,
      "value": 50,
      "quantity": 3,
      "rarity": "Common",
      "is_magical": true,
      "damage": null,
      "damage_type": null,
      "armor_class": null,
      "effect": "–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç 2d4+2 –æ—á–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è.",
      "properties": []
    },
    {
      "name": "–ö–æ–∂–∞–Ω—ã–π –¥–æ—Å–ø–µ—Ö",
      "description": "–ü—Ä–æ—Å—Ç–æ–π –∫–æ–∂–∞–Ω—ã–π –¥–æ—Å–ø–µ—Ö, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—â–∏–π –±–∞–∑–æ–≤—É—é –∑–∞—â–∏—Ç—É.",
      "item_type": "Armor",
      "weight": 5.0,
      "value": 100,
      "quantity": 1,
      "rarity": "Common",
      "is_magical": false,
      "damage": null,
      "damage_type": null,
      "armor_class": 11,
      "effect": null,
      "properties": []
    }
  ],
  "abilities": [
    {
      "name": "–£–¥–∞—Ä –±–µ—Ä—Å–µ—Ä–∫–∞",
      "description": "–Ø—Ä–æ—Å—Ç–Ω–∞—è –∞—Ç–∞–∫–∞, –Ω–∞–Ω–æ—Å—è—â–∞—è –æ–≥—Ä–æ–º–Ω—ã–π —É—Ä–æ–Ω, –Ω–æ —Å–Ω–∏–∂–∞—é—â–∞—è –∑–∞—â–∏—Ç—É.",
      "details": {
        "duration": "1 —Ä–∞—É–Ω–¥",
        "damage_bonus": "+5",
        "ac_penalty": "-2"
      }
    },
    {
      "name": "–ö–ª–∏—á –≤–æ–∏–Ω–∞",
      "description": "–ö—Ä–∏–∫, –≤—Å–µ–ª—è—é—â–∏–π —Ö—Ä–∞–±—Ä–æ—Å—Ç—å –≤ —Å–æ—é–∑–Ω–∏–∫–æ–≤ –∏ –≤—Å–µ–ª—è—é—â–∏–π —Å—Ç—Ä–∞—Ö –≤ –≤—Ä–∞–≥–æ–≤.",
      "details": {
        "range": "30 —Ñ—É—Ç–æ–≤",
        "effect": "–°–æ—é–∑–Ω–∏–∫–∏ –ø–æ–ª—É—á–∞—é—Ç –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –Ω–∞ –±—Ä–æ—Å–∫–∏ –ø—Ä–æ—Ç–∏–≤ —Å—Ç—Ä–∞—Ö–∞ –Ω–∞ 1 —Ä–∞—É–Ω–¥."
      }
    }
  ],
  "personality_history": "–Ø—Ä–æ—Å–ª–∞–≤ ‚Äì –≥—Ä–æ–∑–Ω—ã–π –≤–æ–∏–Ω, –∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–≤–æ–µ–π —Å–∏–ª–æ–π –∏ –≥–Ω–µ–≤–æ–º –Ω–∞ –ø–æ–ª–µ –±–æ—è. –û–Ω –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –∑–∞—â–∏—â–∞—Ç—å —Å–ª–∞–±—ã—Ö –∏ —Å—Ä–∞–∂–∞—Ç—å—Å—è –∑–∞ –ø—Ä–∞–≤–æ–µ –¥–µ–ª–æ, —Ö–æ—Ç—è –∏–Ω–æ–≥–¥–∞ –µ–≥–æ –≥–Ω–µ–≤ –∑–∞—Ç–º–µ–≤–∞–µ—Ç —Ä–∞–∑—É–º. –í –ø—Ä–æ—à–ª–æ–º –ø–æ—Ç–µ—Ä—è–ª —Å–µ–º—å—é –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –Ω–∞–ø–∞–¥–µ–Ω–∏—è –≥–æ–±–ª–∏–Ω–æ–≤, —á—Ç–æ –∑–∞–∫–∞–ª–∏–ª–æ –µ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä."
}

{
  "name": "–ó–∞–±—Ä–æ—à–µ–Ω–Ω–∞—è –•–∏–∂–∏–Ω–∞ –õ–µ—Å–Ω–∏–∫–∞",
  "description": "–°—Ç–∞—Ä–∞—è —Ö–∏–∂–∏–Ω–∞, –æ–∫—É—Ç–∞–Ω–Ω–∞—è –ø–æ–ª—É–º—Ä–∞–∫–æ–º. –°–æ–ª–Ω–µ—á–Ω—ã–π —Å–≤–µ—Ç –µ–¥–≤–∞ –ø—Ä–æ–Ω–∏–∫–∞–µ—Ç —Å–∫–≤–æ–∑—å –ø—ã–ª—å–Ω—ã–µ –æ–∫–Ω–∞, –æ—Å–≤–µ—â–∞—è —Ç–∞–Ω—Ü—É—é—â–∏–µ –≤ –≤–æ–∑–¥—É—Ö–µ —á–∞—Å—Ç–∏—Ü—ã –ø—ã–ª–∏. –°–ª—ã—à–µ–Ω —Ç–∏—Ö–∏–π —Å–∫—Ä–∏–ø –ø–æ–ª–æ–≤–∏—Ü –∏ —Å–ª–∞–±–æ–µ –¥—É–Ω–æ–≤–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞, –¥–æ–Ω–æ—Å—è—â–µ–µ –∑–∞–ø–∞—Ö —Å—ã—Ä–æ—Å—Ç–∏ –∏ –ø—Ä–µ–ª—ã—Ö –ª–∏—Å—Ç—å–µ–≤. –í –≤–æ–∑–¥—É—Ö–µ –≤–∏—Å–∏—Ç –µ–ª–µ —É–ª–æ–≤–∏–º—ã–π –∞—Ä–æ–º–∞—Ç —Å—Ç–∞—Ä–æ–≥–æ –¥–µ—Ä–µ–≤–∞ –∏ –∑–∞–ø–ª–µ—Å–Ω–µ–≤–µ–ª–æ–π –µ–¥—ã.",
  "size_description": "–ù–µ–±–æ–ª—å—à–∞—è –æ–¥–Ω–æ–∫–æ–º–Ω–∞—Ç–Ω–∞—è —Ö–∏–∂–∏–Ω–∞, –ø—Ä–∏–º–µ—Ä–Ω–æ 4 –Ω–∞ 5 –º–µ—Ç—Ä–æ–≤, —Å –Ω–∏–∑–∫–∏–º –ø–æ—Ç–æ–ª–∫–æ–º.",
  "objects": [
    {
      "name": "–ë–æ–ª—å—à–∞—è –î—É–±–≤–∞—è –î–≤–µ—Ä—å",
      "description": "–ú–∞—Å—Å–∏–≤–Ω–∞—è –¥—É–±–æ–≤–∞—è –¥–≤–µ—Ä—å, –ø–æ—Ç–µ–º–Ω–µ–≤—à–∞—è –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ –∏ –ø–æ–∫—Ä—ã—Ç–∞—è —Ç—Ä–µ—â–∏–Ω–∞–º–∏. –ù–∞ –¥–≤–µ—Ä–∏ –≤–∏–¥–Ω–∞ —Ä–µ–∑–Ω–∞—è —ç–º–±–ª–µ–º–∞ –º–µ–¥–≤–µ–¥—è. –†—É—á–∫–∞ —Å–¥–µ–ª–∞–Ω–∞ –∏–∑ –∫–æ–≤–∞–Ω–æ–≥–æ –∂–µ–ª–µ–∑–∞, —Ä–∂–∞–≤–∞—è –∏ —Ö–æ–ª–æ–¥–Ω–∞—è –Ω–∞ –æ—â—É–ø—å. –î–≤–µ—Ä—å –≤—ã–≥–ª—è–¥–∏—Ç –æ—á–µ–Ω—å —Ç—è
      "size_description": "–ü—Ä–∏–º–µ—Ä–Ω–æ 2 –º–µ—Ç—Ä–∞ –≤ –≤—ã—Å–æ—Ç—É –∏ 1 –º–µ—Ç—Ä –≤ —à–∏—Ä–∏–Ω—É.",
      "position_in_scene": "–£ –≤—Ö–æ–¥–∞ –≤ —Ö–∏–∂–∏–Ω—É, –≤ —Å–µ–≤–µ—Ä–Ω–æ–π —Å—Ç–µ–Ω–µ.",
      "interactions": [
        "–û—Ç–∫—Ä—ã—Ç—å",
        "–ó–∞–∫—Ä—ã—Ç—å",
        "–û—Å–º–æ—Ç—Ä–µ—Ç—å"
      ]
    },
    {
      "name": "–°—Ç–∞—Ä—ã–π –î–µ—Ä–µ–≤—è–Ω–Ω—ã–π –°—Ç–æ–ª",
      "description": "–ö—Ä—É–≥–ª—ã–π —Å—Ç–æ–ª, —Å–¥–µ–ª–∞–Ω–Ω—ã–π –∏–∑ –≥—Ä—É–±–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞. –ù–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ —Å—Ç–æ–ª–∞ –≤–∏–¥–Ω—ã —Å–ª–µ–¥—ã –æ—Ç –Ω–æ–∂–µ–π –∏ –ø—è—Ç–Ω–∞ –æ—Ç –ø—Ä–æ–ª–∏—Ç–æ–π –∂–∏–¥–∫–æ—Å—Ç–∏. –°—Ç–æ–ª —Å—Ç–æ–∏—Ç –Ω–∞ —Ç—Ä–µ—Ö –∫—Ä–∏–≤—ã—Ö –Ω–æ–∂–∫–∞—Ö, –∑–∞–º–µ—Ç–Ω–æ —à–∞—Ç–∞–µ—Ç—Å—è.",
      "size_description": "–û–∫–æ–ª–æ –º–µ—Ç—Ä–∞ –≤ –¥–∏–∞–º–µ—Ç—Ä–µ.",
      "position_in_scene": "–í —Ü–µ–Ω—Ç—Ä–µ –∫–æ–º–Ω–∞—Ç—ã.",
      "interactions": [
        "–û—Å–º–æ—Ç—Ä–µ—Ç—å",
        "–ü–æ—Ç—Ä–æ–≥–∞—Ç—å"
      ]
    },
    {
      "name": "–ö–∞–º–∏–Ω",
      "description": "–ë–æ–ª—å—à–æ–π –∫–∞–º–µ–Ω–Ω—ã–π –∫–∞–º–∏–Ω, –≤ –∫–æ—Ç–æ—Ä–æ–º –¥–∞–≤–Ω–æ –Ω–µ —Ä–∞–∑–≤–æ–¥–∏–ª–∏ –æ–≥–æ–Ω—å. –°–∞–∂–∞ –ø–æ–∫—Ä—ã–≤–∞–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å—Ç–µ–Ω—ã. –£ –æ—Å–Ω–æ–≤–∞–Ω–∏—è –∫–∞–º–∏–Ω–∞ –∫—É—á–∞ –ø–µ–ø–ª–∞ –∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±–≥–æ—Ä–µ–≤—à–∏—Ö –ø–æ–ª–µ–Ω—å–µ–≤. –ù–∞–¥ –∫–∞–º–∏–Ω–æ–º –≤–∏—Å–∏—Ç —Ä–∂–∞–≤—ã–π –∫—Ä—é–∫.",
      "size_description": "–ü—Ä–∏–º–µ—Ä–Ω–æ 1.5 –º–µ—Ç—Ä–∞ –≤ –≤—ã—Å–æ—Ç—É –∏ 1 –º–µ—Ç—Ä –≤ —à–∏—Ä–∏–Ω—É.",
      "position_in_scene": "–£ –∑–∞–ø–∞–¥–Ω–æ–π —Å—Ç–µ–Ω—ã.",
      "interactions": [
        "–û—Å–º–æ—Ç—Ä–µ—Ç—å"
      ]
    }
  ]
}

–Ø—Ä–æ—Å–ª–∞–≤ –ø–æ–ª—É—á–∏–ª 10 —É—Ä–æ–Ω–∞ –∏ —Ç–µ–ø–µ—Ä—å –∑–∞—Ä–∞–∂–µ–Ω –±–æ–ª–µ–∑–Ω—å—é, –∫–æ—Ç–æ—Ä–∞—è —Å–Ω–∏–∂–∞–µ—Ç –µ–≥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ –Ω–∞ 10 –µ–¥–∏–Ω–∏—Ü. –•–∏–∂–∏–Ω–∞ –õ–µ—Å–Ω–∏–∫–∞ –±—ã–ª–∞ –∞—Ç–∞–∫–æ–≤–∞–Ω–∞ –≥–æ–±–ª–∏–Ω–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–æ—Ä–≤–∞–ª–∏ –Ω–µ—Å—É—â—É–± —Å—Ç–µ–Ω—É –∏ —Ç–µ–ø–µ—Ä—å –æ—Ç —Ö–∏–∂–∏–Ω—ã –æ—Å—Ç–∞–ª–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤—Ö–æ–¥–Ω–∞—è –¥–≤–µ—Ä—å –∏ —á–∞—Å—Ç—å —Å—Ç–µ–Ω—ã.
        """, 
        ChangesToMake)
    print(f"{INFO_COLOR}Result:{Colors.RESET}")
    for i in a: # type: ignore
        print(i.model_dump_json(indent=2))
    
    print(f"\n{HEADER_COLOR}Test 2: Spell Question{Colors.RESET}")
    a = classifier.generate(
        "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ñ–∞–π—Ä–±–æ–ª?", 
        ClassifyInformationOrActionRequest)
    print(f"{INFO_COLOR}Result:{Colors.RESET}")
    print(a)
